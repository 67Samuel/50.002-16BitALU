/*
   This file was generated automatically by Alchitry Labs version 1.2.1.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module auto_test_2 (
    input clk,
    input rst,
    output reg [4:0] out
  );
  
  
  
  wire [16-1:0] M_alu16_out;
  wire [1-1:0] M_alu16_z;
  wire [1-1:0] M_alu16_v;
  wire [1-1:0] M_alu16_n;
  reg [16-1:0] M_alu16_a;
  reg [16-1:0] M_alu16_b;
  reg [6-1:0] M_alu16_alufn;
  alu_4 alu16 (
    .a(M_alu16_a),
    .b(M_alu16_b),
    .alufn(M_alu16_alufn),
    .out(M_alu16_out),
    .z(M_alu16_z),
    .v(M_alu16_v),
    .n(M_alu16_n)
  );
  
  localparam ADD_testcase = 5'd0;
  localparam SUB_testcase = 5'd1;
  localparam MUL_testcase = 5'd2;
  localparam AND_testcase = 5'd3;
  localparam OR_testcase = 5'd4;
  localparam XOR_testcase = 5'd5;
  localparam LDR_testcase = 5'd6;
  localparam CMPEQ_testcase = 5'd7;
  localparam CMPLT_testcase = 5'd8;
  localparam CMPLE_testcase = 5'd9;
  localparam SHL_testcase = 5'd10;
  localparam SHR_testcase = 5'd11;
  localparam SRA_testcase = 5'd12;
  localparam ADDERROR_testcase = 5'd13;
  localparam BOOLERRER_testcase = 5'd14;
  localparam COMPERRER_testcase = 5'd15;
  localparam SHIFTERRER_testcase = 5'd16;
  localparam PASS_testcase = 5'd17;
  
  reg [4:0] M_testcase_d, M_testcase_q = ADD_testcase;
  
  always @* begin
    M_testcase_d = M_testcase_q;
    
    out = 1'h0;
    M_alu16_a = 1'h0;
    M_alu16_b = 1'h0;
    M_alu16_alufn = 1'h0;
    
    case (M_testcase_q)
      ADD_testcase: begin
        M_alu16_a = 16'habcd;
        M_alu16_b = 16'h1234;
        M_alu16_alufn = 6'h00;
        if (M_alu16_out == 16'hbe01) begin
          M_testcase_d = SUB_testcase;
        end else begin
          M_testcase_d = ADDERROR_testcase;
        end
      end
      SUB_testcase: begin
        M_alu16_a = 16'habcd;
        M_alu16_b = 16'h1234;
        M_alu16_alufn = 6'h01;
        if (M_alu16_out == 16'h9999) begin
          M_testcase_d = MUL_testcase;
        end else begin
          M_testcase_d = ADDERROR_testcase;
        end
      end
      MUL_testcase: begin
        M_alu16_a = 16'habcd;
        M_alu16_b = 16'h1234;
        M_alu16_alufn = 6'h02;
        if (M_alu16_out == 16'h4fa4) begin
          M_testcase_d = AND_testcase;
        end else begin
          M_testcase_d = ADDERROR_testcase;
        end
      end
      AND_testcase: begin
        M_alu16_a = 16'h00b5;
        M_alu16_b = 16'h00ac;
        M_alu16_alufn = 6'h18;
        if (M_alu16_out == 16'h00a4) begin
          M_testcase_d = OR_testcase;
        end else begin
          M_testcase_d = BOOLERRER_testcase;
        end
      end
      OR_testcase: begin
        M_alu16_a = 16'h00b5;
        M_alu16_b = 16'h00ac;
        M_alu16_alufn = 6'h1e;
        if (M_alu16_out == 16'h00bd) begin
          M_testcase_d = XOR_testcase;
        end else begin
          M_testcase_d = BOOLERRER_testcase;
        end
      end
      XOR_testcase: begin
        M_alu16_a = 16'h00b5;
        M_alu16_b = 16'h00ac;
        M_alu16_alufn = 6'h16;
        if (M_alu16_out == 16'h0019) begin
          M_testcase_d = LDR_testcase;
        end else begin
          M_testcase_d = BOOLERRER_testcase;
        end
      end
      LDR_testcase: begin
        M_alu16_a = 16'h00b5;
        M_alu16_b = 16'h00ac;
        M_alu16_alufn = 6'h1a;
        if (M_alu16_out == 16'h00b5) begin
          M_testcase_d = CMPEQ_testcase;
        end else begin
          M_testcase_d = BOOLERRER_testcase;
        end
      end
      CMPEQ_testcase: begin
        M_alu16_a = 16'habcd;
        M_alu16_b = 16'habcd;
        M_alu16_alufn = 6'h33;
        if (M_alu16_out == 16'h0001) begin
          M_testcase_d = CMPLT_testcase;
        end else begin
          M_testcase_d = COMPERRER_testcase;
        end
      end
      CMPLT_testcase: begin
        M_alu16_a = 16'habcd;
        M_alu16_b = 16'habce;
        M_alu16_alufn = 6'h35;
        if (M_alu16_out == 16'h0001) begin
          M_testcase_d = CMPLE_testcase;
        end else begin
          M_testcase_d = COMPERRER_testcase;
        end
      end
      CMPLE_testcase: begin
        M_alu16_a = 16'habcd;
        M_alu16_b = 16'habce;
        M_alu16_alufn = 6'h37;
        if (M_alu16_out == 16'h0001) begin
          M_testcase_d = SHL_testcase;
        end else begin
          M_testcase_d = COMPERRER_testcase;
        end
      end
      SHL_testcase: begin
        M_alu16_a = 16'h0029;
        M_alu16_b = 16'h0002;
        M_alu16_alufn = 6'h20;
        if (M_alu16_out == 16'h00a4) begin
          M_testcase_d = SHR_testcase;
        end else begin
          M_testcase_d = SHIFTERRER_testcase;
        end
      end
      SHR_testcase: begin
        M_alu16_a = 16'h0029;
        M_alu16_b = 16'h0002;
        M_alu16_alufn = 6'h21;
        if (M_alu16_out == 16'h000a) begin
          M_testcase_d = SRA_testcase;
        end else begin
          M_testcase_d = SHIFTERRER_testcase;
        end
      end
      SRA_testcase: begin
        M_alu16_a = 16'h0029;
        M_alu16_b = 16'h0002;
        M_alu16_alufn = 6'h23;
        if (M_alu16_out == 16'h000a) begin
          M_testcase_d = PASS_testcase;
        end else begin
          M_testcase_d = SHIFTERRER_testcase;
        end
      end
      PASS_testcase: begin
        out = 5'h10;
        M_testcase_d = PASS_testcase;
      end
      ADDERROR_testcase: begin
        out = 5'h08;
        M_testcase_d = ADDERROR_testcase;
      end
      BOOLERRER_testcase: begin
        out = 5'h04;
        M_testcase_d = BOOLERRER_testcase;
      end
      COMPERRER_testcase: begin
        out = 5'h02;
        M_testcase_d = COMPERRER_testcase;
      end
      SHIFTERRER_testcase: begin
        out = 5'h01;
        M_testcase_d = SHIFTERRER_testcase;
      end
    endcase
  end
  
  always @(posedge clk) begin
    if (rst == 1'b1) begin
      M_testcase_q <= 1'h0;
    end else begin
      M_testcase_q <= M_testcase_d;
    end
  end
  
endmodule
